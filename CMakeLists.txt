cmake_minimum_required(VERSION 3.0)
include (GenerateExportHeader)
include(CheckIncludeFile)
include(CheckCXXSourceCompiles)
include(CheckCXXSourceRuns)

option(BUILD_SHARED_LIBS "Build shared libraries" Off)

project(HDTN VERSION 1.0)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_BUILD_TYPE Release)
find_package(Boost 1.67.0 REQUIRED system filesystem timer thread regex filesystem program_options unit_test_framework iostreams random log log_setup)
# define _WIN32_WINNT to use Windows 10 for boost
if(WIN32)
    add_compile_definitions(_CRT_SECURE_NO_WARNINGS)
    add_compile_definitions(_WIN32_WINNT=0x0A00)
endif()

#logging link type
if(NOT Boost_USE_STATIC_LIBS)
	#add_compile_definitions(BOOST_LOG_DYN_LINK)
	add_compile_definitions(BOOST_ALL_DYN_LINK) 
endif()

OPTION(USE_X86_HARDWARE_ACCELERATION "Use CPU SSE/SSE2/BMI1/BMI2 instructions" ON)
OPTION(LTP_RNG_USE_RDSEED "Use CPU RDSEED instruction as a source of randomness for LTP Random Number Generator" ON)
include(${CMAKE_SOURCE_DIR}/hardware_acceleration.cmake) # Determine if hardware acceleration can be used


if (WIN32)
	#add_compile_definitions(ZMQ_STATIC)
	set(libzmq_INCLUDE "C:/libzmq_msvc_x64/include" CACHE PATH "Folder to Libzmq headers")
	set(libzmq_LIB "C:/libzmq_msvc_x64/lib/libzmq-v141-mt-4_3_4.lib" CACHE FILEPATH "Libzmq library")
	set(pthread_LIB "")
else()
	set(libzmq_INCLUDE "")
	set(libzmq_LIB zmq)
	set(pthread_LIB pthread)
endif()

OPTION(USE_HDTN_GUI "Use Civetweb HDTN GUI" OFF)
if(USE_HDTN_GUI)
	add_compile_definitions(USE_HDTN_GUI)
	set(hdtn_gui_LIB hdtn_gui)
	if (WIN32)
		set(civetweb_INCLUDE "C:/civetweb_msvc2017/include" CACHE PATH "Folder to CivetServer.h and civetweb.h")
		set(civetweb_LIB "C:/civetweb_msvc2017/lib_release/civetweb.lib" CACHE FILEPATH "Civetweb library")
		set(civetwebcpp_LIB "C:/civetweb_msvc2017/lib_release/civetweb-cpp.lib" CACHE FILEPATH "Civetweb CPP library")
	else()
		set(civetweb_INCLUDE "/path/to/hdtn/external.install/include" CACHE PATH "Folder to CivetServer.h and civetweb.h")
		set(civetweb_LIB "/path/to/hdtn/external.install/lib/libcivetweb.so" CACHE FILEPATH "Civetweb library")
		set(civetwebcpp_LIB "" CACHE FILEPATH "Civetweb CPP library")
	endif()
else()
	set(hdtn_gui_LIB "")
endif()

OPTION(ENABLE_OPENSSL_SUPPORT "TcpclV4 can use OpenSSL" ON)
if(ENABLE_OPENSSL_SUPPORT)
    add_compile_definitions(OPENSSL_SUPPORT_ENABLED)
    if (WIN32)
		#add_compile_definitions(ZMQ_STATIC)
		set(openssl_INCLUDE "C:/openssl-1.1.1e_msvc2017/include" CACHE PATH "Folder to Libzmq headers")
		set(openssl_LIB "C:/openssl-1.1.1e_msvc2017/lib/libssl_static.lib" CACHE FILEPATH "Openssl Crypto library")
		set(crypto_LIB "C:/openssl-1.1.1e_msvc2017/lib/libcrypto_static.lib" CACHE FILEPATH "Openssl library")
	else()
		set(openssl_INCLUDE "")
		set(openssl_LIB ssl)
		set(crypto_LIB crypto)
	endif()
else()
	set(openssl_INCLUDE "")
	set(openssl_LIB "")
	set(crypto_LIB "")
endif()

add_subdirectory(common/bpcodec)
add_subdirectory(common/logger)
add_subdirectory(common/util)
add_subdirectory(common/config)
add_subdirectory(common/induct_manager)
add_subdirectory(common/outduct_manager)
add_subdirectory(common/tcpcl)
add_subdirectory(common/ltp)
add_subdirectory(common/stcp)
add_subdirectory(common/udp)
if(USE_HDTN_GUI)
	add_subdirectory(module/gui)
endif()
add_subdirectory(module/storage)
add_subdirectory(module/ingress)
add_subdirectory(module/egress)
add_subdirectory(module/scheduler)
add_subdirectory(module/router)
add_subdirectory(module/hdtn_one_process)
add_subdirectory(tests/unit_tests)
add_subdirectory(tests/integrated_tests)

